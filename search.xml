<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS编译原理]]></title>
    <url>%2F2020%2F08%2F16%2Fabc%2Ftest%2F</url>
    <content type="text"><![CDATA[nbbbbbb]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2F2020%2F08%2F16%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题这是加粗的文字 这是倾斜的文字` 这是斜体加粗的文字 这是加删除线的文字 这是引用的内容 这是引用的内容 这是引用的内容 ![图片alt](图片地址 ‘’图片title’’)![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”) 超链接名title可加可不加 简书百度 列表内容 列表内容 列表内容 注意：- + * 跟内容之间都要有一个空格 列表内容 列表内容 列表内容 注意：序号跟内容之间要有空格 列表嵌套上一级和下一级之间敲三个空格即可 表头 表头 表头 内容 内容 内容 内容 内容 内容 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 包起来。此处省略 姓名|技能|排行 –|:–:|–: 刘备|哭|大哥 关羽|打|二哥 张飞|骂|三弟 代码内容 123代码...代码...代码... 1234567st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS编译原理]]></title>
    <url>%2F2020%2F08%2F16%2F%E5%86%99%E7%82%B9%E5%95%A5%2F</url>
    <content type="text"><![CDATA[#编译原理源代码执行之前会经历三个步骤，统称为‘编译’ 分词/词法分析 主要将字符组成的字符串分解成有意义的代码块，这些代码块被称为词法单元，如var a = 2;会被分解成var、a、=、2、； 解析/语法分析 代码生成]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3换行]]></title>
    <url>%2F2020%2F01%2F13%2Fcss%E6%8D%A2%E8%A1%8C%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[##white-spacewhite-space:nowrap永不换行，只有存在时才换行 white-space:pre：空格和换行符全都被保留了下来！不过自动换行还是没了。保留，所以pre其实是preserve的缩写，这样就好记了。 white-space:pre-wrap：显然pre-wrap就是preserve+wrap，保留空格和换行符，且可以自动换行。 white-space:pre-line：空格被合并了，但是换行符可以发挥作用，line应该是new line的意思，自动换行还在，所以pre-line其实是preservenew line+wrap。 ##word-breakword-break:keep-all：所有“单词”一律不拆分换行，注意，我这里的“单词”包括连续的中文字符（还有日文、韩文等），或者可以理解为只有空格可以触发自动换行 word-break:break-all：所有单词碰到边界一律拆分换行，不管你是incomprehensibilities这样一行都显示不下的单词，还是long这样很短的单词，只要碰到边界，都会被强制拆分换行。所以用word-break:break-all时要慎重呀。 word-wrap又叫做overflow-wrap： 这个属性也是控制单词如何被拆分换行的，实际上是作为word-break的互补，它只有两个值：normal | break-word，那我们看下break-word：终于达到了上文我们希望的效果，只有当一个单词一整行都显示不下时，才会拆分换行该单词。所以我觉得overflow-wrap更好理解好记一些，overflow，只有长到溢出的单词才会被强制拆分换行！（其实前面的word-break属性除了列出的那三个值外，也有个break-word值，效果跟这里的word-wrap:break-word一样，然而只有Chrome、Safari等部分浏览器支持）]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>换行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3水平居中的方法]]></title>
    <url>%2F2020%2F01%2F13%2Fcss%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[#块级元素与行内元素的居中 块级元素居中 html代码部分 &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt; &lt;/div&gt;行内元素居中 html代码部分 &lt;div class=&quot;parent&quot;&gt; &lt;span class=&quot;child&quot;&gt;child&lt;/span&gt; &lt;/div&gt;##水平居中01 行内元素 text-align: center; .parent { text-align: center; } 02 块级元素 margin: auto;（低版本浏览器还需要设置 text-align: center;） .parent { text-align: center; } .child { width: 100px; margin: auto; border: 1px solid blue; } ##垂直居中01 行内元素（单行文字垂直居中）：设置 line-height = height .parent { height: 200px; line-height: 200px; border: 1px solid red; } 02 块级元素：绝对定位（需要提前知道尺寸） 优点：兼容性不错缺点：需要提前知道尺寸，margin-top: -(高度的一半); margin-left: -(宽度的一半); .parent { position: relative; height: 200px; } .child { width: 80px; height: 40px; background: blue; position: absolute; left: 50%; top: 50%; margin-top: -20px; margin-left: -40px; } 03 块级元素：绝对定位 + transform 优点：不需要提前知道尺寸缺点：兼容性不好 .parent { position: relative; height: 200px; } .child { width: 80px; height: 40px; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); background: blue; } 04 块级元素：绝对定位 + margin: auto; 优点：不需要提前知道尺寸，兼容性好缺点：这个方法是我最喜欢用的一个，要说缺点的话，我目前还不知道。此方法出自张鑫旭老师的博客 小tip: margin:auto实现绝对定位元素的水平垂直居中 .parent { position: relative; height: 200px; } .child { width: 80px; height: 40px; position: absolute; left: 0; top: 0; right: 0; bottom: 0; margin: auto; background: blue; } 05 块级元素：padding 缺点：如果高度固定，需要提前计算尺寸（只在某些特定情况适用）。 .parent { padding: 5% 0; } .child { padding: 10% 0; background: blue; } 06块级元素：display: table-cell .parent { width: 600px; height: 200px; border: 1px solid red; display: table; } .child { display: table-cell; vertical-align: middle;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>水平居中和垂直居中</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS加载会造成阻塞吗？]]></title>
    <url>%2F2020%2F01%2F13%2Fcss%E5%8A%A0%E8%BD%BD%E9%98%BB%E5%A1%9E%2F</url>
    <content type="text"><![CDATA[#CSS加载会造成阻塞吗？1、css加载不会阻塞dom树的解析2、css加载会阻塞dom树的渲染3、css加载会阻塞后面js语句的执行 在一个html文件中，js放在前面，css放在后面，可以很好的避免css阻塞状况的发生。css语句后面不能再放js语句，否则改语句就会等到css执行完成后才执行。 #如何提高css加载速度？1、使用CDN(因为CDN会根据你的网络状况，替你挑选最近的一个具有缓存内容的节点为你提供资源，因此可以减少加载时间) 2、对css进行压缩(可以用很多打包工具，比如webpack,gulp等，也可以通过开启gzip压缩) 3、合理的使用缓存(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个解决防范是在文件名字后面加一个版本号) 4、减少http请求数，将多个css文件合并，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存) #浏览器渲染方式？主要有webkit渲染过程和gecko渲染过程 渲染流程如下 1、HTML解析文件，生成DOM tree，解析css文件生成CSSOM Tree2、将DOM Tree和CSSOM Tree结合，生成Render Tree（渲染树）3、根据Render Tree渲染绘制，将像素渲染到屏幕上 从流程我们可以看出来 1、DOM解析和CSS解析是两个并行的进程，所以这也解释了为什么CSS加载不会阻塞DOM的解析。 2、然而，由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。 3、由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，样式表会在后面的js执行前先加载执行完毕。所以css会阻塞后面js的执行。 #DOMContentLoaded对于浏览器来说，页面加载主要有两个事件，一个是DOMContentLoaded，另一个是onLoad。而onLoad没什么好说的，就是等待页面的所有资源都加载完成才会触发，这些资源包括css、js、图片视频等。 而DOMContentLoaded，顾名思义，就是当页面的内容解析完成后，则触发该事件。 我们可以看到，只有在css加载完成后，才会触发DOMContentLoaded事件。因此，我们可以得出结论： 1、如果页面中同时存在css和js，并且存在js在css后面，则DOMContentLoaded事件会在css加载完后才执行。 2、其他情况下，DOMContentLoaded都不会等待css加载，并且DOMContentLoaded事件也不会等待图片、视频等其他资源加载。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[四种for循环的区别]]></title>
    <url>%2F2019%2F09%2F15%2F%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84for%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[#for/for in/for of/forEach的区别1、for循环在Array和Object中都可以使用 var arr= [1,4,6,5,2,3,4,5]; for（var i=0;i&lt;arr.length;i++）{ console.log(arr[i]); } //1,4,6,5,2,3,4,5 //普通for循环在对象中不实用，因为属性的命名和key的值会存在各种限制，不适合用在对象中 var obj1 = { x0:100, x1:200, x3:300 } for(var key = 0;key &lt; 3;key++){ console.log(obj1[&quot;x&quot;+key]);//这里需要指定键名才能输出值名； //100,200,3002、for in在Array和Object中都可以使用 在对象上还包含了原型上的属性。 var arr= [1,4,6,5,2,3,4,5]; for(var i in arr){ console.log(arr[i]) if(arr.hasOwnProperty(i)){ console.log(arr[i]) } } var obj = { `x:100,` y:200, z:300 } obj.__proto__.a=400; for(var key in obj){ console.log(obj[key]); if(obj.hasOwnProperty(key)){ console.log(obj[key]); } }3、for of在Array，Object，Set,Map中都可以使用 var arr= [1,4,6,5,2,3,4,5,90];for(let index of arr.keys()){ console.log(index)}//0,1,2,3,4,5,6,7,8for(let value of arr.values()){ console.log(value)}//报错for(let value of arr){ console.log(value)}//1,4,6,5,2,3,4,5,90for(let [index,value] of arr.entries()){ console.log(index,value)} var obj = { x:100, y:200, z:300 } for(let [key,value] of Object.entries(obj)){ console.log(key,value);} let arr = [“add”,”delete”,”clear”,”has”];let list = new Set(arr);for(let key of list.keys()){console.log(“key”,key);} for(let value of list.values()){console.log(“value”,value);} for(let [key,value] of list.entries()){console.log(“value”,key,value);} let map = new Map();map.set(“a”,123).set(“b”,234).set(“c”,345);console.log(map); for(let key of map.keys()){console.log(“value”,value);} for(let [key,value] of map.entries()){console.log(“entries”,key,value);} 4、forEach在Array，Set,Map中都可以使用 list.forEach((value,key)=&gt;{console.log(“forEach”,key,value);})]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS基础对象及使用方法]]></title>
    <url>%2F2019%2F09%2F10%2FJS%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E8%B7%9F%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[##Array对象## #数组属性：#constructor 返回创建数组对象的原型函数length 设置或返回数组元素的个数prototype 允许我向数组对象添加属性或者方法 #数组方法concat() 连接两个或更多数组，并返回结果copyWithin() 从数组的指定位置拷贝元素到数组的另一个指定位置中。 ##Boolean对象## ##Date对象## ##Math对象## ##Number对象## ##String对象## ##RegExp对象## ##全局属性/函数## ##运算符##]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6 解构赋值遇到的一些问题]]></title>
    <url>%2F2019%2F09%2F05%2FES6_%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[#ES6解构赋值为我们提取对象中的属性提供了极其大的方便性，但是在使用它时需要注意变量名不能相同，否则会报错 const item = { username:{ name:&quot;zhuzhu&quot;, sex:&quot;boy&quot;, age:&quot;22&quot; }, data:{ name:&quot;box&quot;, size:&quot;15kg&quot;, color:&quot;black&quot; } } const { username:{ name }, data:{ name } } = item 这时候就会报错：Uncaught SyntaxError: Identifier ‘name’ has already been declared。提示说name这个属性已经被定义了，所以无法解构赋值]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>解构赋值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS基础对象及使用方法]]></title>
    <url>%2F2019%2F09%2F03%2FES6_Class%2F</url>
    <content type="text"><![CDATA[##Array对象##数组属性：constructor 返回创建数组对象的原型函数length 设置或返回数组元素的个数prototype 允许我向数组对象添加属性或者方法 ##Boolean对象## ##Date对象## ##Math对象## ##Number对象## ##String对象## ##RegExp对象## ##全局属性/函数## ##运算符##]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[electron 试水]]></title>
    <url>%2F2019%2F09%2F01%2Felectron%2F</url>
    <content type="text"><![CDATA[#前言1、Vue打包成桌面应用 关于Electron有两种打包方法第一种：将自己的 vue 项目打包，放到官方的 demo 文件中，改变打包路径 第二种：在自己的 vue 的项目中引入插件，然后打包 1、下载官方例程 git clone https://github.com/electron/electron-quick-start 2、进入到自己的vue项目中，将公共路径’/‘修改为相对路径’./‘ 3、将vue项目打包 npm run build 4、删除electron项目中的index页面，并修改main.js // main.js 原始内容 mainWindow.loadFile(&apos;index.html&apos;) // 修改后的内容 mainWindow.loadFile(&apos;./dist/index.html&apos;) 5、将第三步拿到的dist文件夹放在官方例程中，运行下面指令可以预览结果 npm install npm run start6、如果白屏，返回第二步重试 7、在官方例程中，下载打包需要的依赖electron-package npm install electron-packager --save-dev8、在官方例程中，进入package.json，在script中加入指令，可以去官方看配置信息 &quot;scripts&quot;: { &quot;start&quot;: &quot;electron .&quot;, &quot;packager&quot;: &quot;electron-packager ./ App --platform=win32 --arch=x64 --electron-version=2.0.0 --overwrite&quot;//此处为添加命令 } 9、运行命令打包，然后会出现一个App-win32-x64的文件夹，这就是打包好的桌面应用 &gt; npm run packager 尝试了一下无边框，但是蛮多bug的，暂时无法实现]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github基础操作]]></title>
    <url>%2F2019%2F08%2F31%2Fgithub%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[#前言# github 基础操作 git init初始化本地 git 仓库git add README.md添加 README.md 文件git status展示当前本地仓库的状态，查看刚刚添加进去修改的文件git reset filename.md从暂存区删除指定文件touch .gitignore规定不上传的文件git branch branchName创建一个新的分支git checkout branchname切换到新的分支git merge branchname分支合并git pull从远程存储库提取最新版本。更新本地版本git commit -m “first commit”上传注释上传到本地暂存区git remote add origin git@github.com:dunjia-zhuda/true-live.git链接远程 github 仓库git push -u origin master#同步到远程仓库# git config —global user.name “Your Name”git config —global user.email “yourEmail@mail.com”装了 github 之后初始化一次就行git add .把项目文件夹下的所有文件都放进暂存区。git add *.html把项目文件夹下的所有.html 文件都放进暂存区，当然你可以换成其他任何扩展名，就把该扩展名的所有文件都放进暂存区。还有不会的就看这个 github 指南大全#分支管理#1,从已有的分支创建新的分支(如从 master 分支),创建一个 dev 分支 git checkout -b dev2,创建完可以查看一下,分支已经切换到 dev git branch * dev master3,提交该分支到远程仓库 git push origin dev4,测试从远程获取 dev git pull origin dev或者： 如果用命令行，运行 git fetch，可以将远程分支信息获取到本地，再运行git checkout -b local-branchname origin/remote_branchname 就可以将远程分支映射到本地命名为 local-branchname 的一分支 5,我觉得现在重要的就是设置 git push,pull 默认的提交获取分支,这样就很方便的使用 git push 提交信息或 git pull 获取信息 git branch --set-upstream-to=origin/dev取消对 master 的跟踪 git branch --unset-upstream master #git icon]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
</search>
